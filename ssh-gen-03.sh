#!/bin/bash

# SSH Key Generation and Setup Script

# Pretty print function for user messages
print() {
    echo "========================================"
    echo "$1"
    echo "========================================"
}

# Display message function
display_message() {
    echo ">>> $1"
}

# Get key name from user
read -p "Name your key: " KEY_NAME

if [[ -z "$KEY_NAME" ]]; then
    echo "No key name provided. Exiting."
    exit 1
fi

KEY_PATH="$HOME/.ssh/$KEY_NAME"

# Check if key already exists
if [[ -f "$KEY_PATH" ]]; then
    echo "'$KEY_NAME' already exists"
    read -p "Do you want to overwrite it? (y/N): " OVERWRITE
    
    if [[ ! $OVERWRITE =~ ^[Yy]$ ]]; then
        display_message "Exiting to prevent overwrite"
        exit 1
    else
        rm -f "$KEY_PATH" "$KEY_PATH.pub"
        display_message "Removed existing key files"
    fi
fi

# Create .ssh directory and set permissions
mkdir -p "$HOME/.ssh"
chmod 700 "$HOME/.ssh"

# Generate SSH key
display_message "Generating SSH key pair..."
ssh-keygen -t ed25519 -f "$KEY_PATH" -P "" -C "$KEY_NAME" -q

if [[ $? -eq 0 ]]; then
    print "Key pair created successfully!"
else
    echo "Error: Failed to generate SSH key"
    exit 1
fi

# Get VM target information
echo
read -p "Enter username@ip of target location: " VM_TARGET

if [[ -z "$VM_TARGET" ]]; then
    echo "No VM target provided. Exiting."
    exit 1
fi

# Validate VM_TARGET format
if [[ ! $VM_TARGET =~ ^[^@]+@[^@]+$ ]]; then
    echo "Error: Invalid format. Use username@hostname or username@ip"
    exit 1
fi

display_message "Copying public key to $VM_TARGET"

# Copy public key to target (fixed: use .pub file)
if cat "$KEY_PATH.pub" | ssh "$VM_TARGET" "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"; then
    display_message "Public key copied successfully!"
else
    echo "Error: Failed to copy public key to target"
    exit 1
fi

# Get alias for SSH config
read -p "Create an alias for this VM: " VM_ALIAS

if [[ -z "$VM_ALIAS" ]]; then
    display_message "No alias provided. You can connect using: ssh -i \"$KEY_PATH\" \"$VM_TARGET\""
    exit 0
fi

SSH_CONFIG="$HOME/.ssh/config"

# Create SSH config file if it doesn't exist
if [[ ! -f "$SSH_CONFIG" ]]; then
    touch "$SSH_CONFIG"
    chmod 600 "$SSH_CONFIG"
fi

# Check if alias already exists
if grep -q "^Host $VM_ALIAS$" "$SSH_CONFIG"; then
    display_message "Alias '$VM_ALIAS' already exists in SSH config. Skipping config entry."
    echo "You can connect using: ssh -i \"$KEY_PATH\" \"$VM_TARGET\""
else
    # Parse username and hostname
    USERNAME="${VM_TARGET%@*}"
    HOSTNAME="${VM_TARGET#*@}"
    
    # Add the new host entry
    cat >> "$SSH_CONFIG" << EOF

# Generated by ssh-gen script - $(date)
Host $VM_ALIAS
    HostName $HOSTNAME
    User $USERNAME
    IdentityFile $KEY_PATH
    IdentitiesOnly yes

EOF
    
    print "Setup Complete!"
    echo "SSH config entry created!"
    echo "You can now connect using: ssh $VM_ALIAS"
    echo
    echo "Alternative connection method:"
    echo "ssh -i \"$KEY_PATH\" \"$VM_TARGET\""
fi